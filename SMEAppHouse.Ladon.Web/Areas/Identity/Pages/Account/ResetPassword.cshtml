@page "/Account/ResetPassword"
@{
    Layout = "~/Pages/Shared/_NoNavsLayout.cshtml";
}
@model ResetPasswordPageModel
@{
    ViewData["Title"] = "Reset Password";
}

@section Styles {

    <environment include="Development">
        <link href="~/css/user-auth.css" rel="stylesheet" />
    </environment>
    <environment exclude="Development">
        <link href="~/css/dist/user-auth.min.css" rel="stylesheet" />
    </environment>
}

<div class="user-auth-container">
    <div class="d-flex justify-content-center h-100">
        <div class="card" style="width: 440px;">
            <div class="card-header">
                <h3>@(ViewData["Title"])</h3>
            </div>
            <div class="card-body">
                <p class="auth-dlg-title">Enter your new password below.</p>

                <form method="post">
                    <input type="hidden" asp-for="Email" />
                    <input type="hidden" asp-for="Code" />

                    <div asp-validation-summary="All" class="text-danger"></div>

                    <div class="form-group">
                        <label for="Input_Password">New Password</label>
                        <div class="input-group">
                            <input id="Input_Password" type="password" asp-for="Input.Password" class="form-control" autocomplete="new-password" />
                            <div class="input-group-append">
                                <button type="button" class="btn btn-secondary" onclick="suggestPassword()">Suggest Password</button>
                                <button type="button" class="btn btn-outline-secondary" onclick="togglePasswordVisibility()">
                                    <i id="password-icon" class="fas fa-eye"></i>
                                </button>
                            </div>
                        </div>
                        <span asp-validation-for="Input.Password" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label for="Input_ConfirmPassword">Confirm Password</label>
                        <input id="Input_ConfirmPassword" type="password" asp-for="Input.ConfirmPassword" class="form-control" autocomplete="new-password" />
                        <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
                    </div>

                    <button type="submit" class="btn btn-primary">Reset Password</button>
                </form>
            </div>
            <div class="card-footer">
                <div class="links">
                    Already have an account?
                    <a id="sign-in" asp-page="./login">Sign In</a>
                </div>
                <div class="links">
                    Don't have an account?
                    <a id="sign-up" asp-page="./login">Sign Up</a>
                </div>
                <div class="links">
                    <a id="resend-confirmation" asp-page="./ResendEmailConfirmation">Resend email confirmation</a>
                </div>
                <div class="links">
                    <a id="forgot-password" asp-page="./ForgotPassword">Forgot your password?</a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>

        function suggestPassword() {
            const password = generatePassword(@Model.PasswordOptions.RequiredLength);
            document.getElementById('Input_Password').value = password;
            document.getElementById('Input_ConfirmPassword').value = password;
        }

        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        function getChar(charSet) {
            if (charSet.length === 0)
                throw new Error("charSet cannot be empty");
            return charSet.charAt(Math.floor(Math.random() * charSet.length));
        }

        function containsSpecialChars(str, charSet) {
            // Escape special characters in the charSet to be safely used in the regular expression
            var escapedCharSet = charSet.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
            // Create a dynamic regular expression pattern using the charSet
            var pattern = new RegExp(`[${escapedCharSet}]`);
            // Test the string against the pattern
            return pattern.test(str);
        }

        function generatePassword(length) {
            const lowerCharset = "abcdefghijklmnopqrstuvwxyz";
            const upperCharset = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            const digitCharset = "0123456789";
            const nonAlphaCharset = "-._@@+#%*";

            if (length < 6)
                throw new Error("Password length must be at least 6 characters.");

            // Create arrays for the required characters
            let passwordArray = [
                lowerCharset.charAt(Math.floor(Math.random() * lowerCharset.length)),
                upperCharset.charAt(Math.floor(Math.random() * upperCharset.length)),
                digitCharset.charAt(Math.floor(Math.random() * digitCharset.length)),
                nonAlphaCharset.charAt(Math.floor(Math.random() * nonAlphaCharset.length))
            ];

            // Fill the rest of the password length with random characters from the full set
            const allCharset = lowerCharset + upperCharset + digitCharset + nonAlphaCharset;
            for (let i = passwordArray.length; i < length; i++) {
                passwordArray.push(allCharset.charAt(Math.floor(Math.random() * allCharset.length)));
            }

            // Shuffle the password to ensure randomness
            var sample = shuffleArray(passwordArray).join('');

            if (containsSpecialChars(sample, lowerCharset) &&
                containsSpecialChars(sample, upperCharset) &&
                containsSpecialChars(sample, digitCharset) &&
                containsSpecialChars(sample, nonAlphaCharset)) 
                return sample;
            else return generatePassword(length);
        }

        function togglePasswordVisibility() {
            const passwordField = document.getElementById('Input_Password');
            const confirmPasswordField = document.getElementById('Input_ConfirmPassword');
            const passwordIcon = document.getElementById('password-icon');

            if (passwordField.type === 'password') {
                passwordField.type = 'text';
                confirmPasswordField.type = 'text';
                passwordIcon.classList.remove('fa-eye');
                passwordIcon.classList.add('fa-eye-slash');
            } else {
                passwordField.type = 'password';
                confirmPasswordField.type = 'password';
                passwordIcon.classList.remove('fa-eye-slash');
                passwordIcon.classList.add('fa-eye');
            }
        }
    </script>
}